// Define the MEMORY module
module MEMORY {
    input [15:0] addr;
    input [7:0] data_in;
    output [7:0] data_out;
    input read_write; 

    reg [7:0] memory[0:255];    // 256-byte 

    always {
        if (read_write) {
            memory[addr] <= data_in;  // W
        } else {
            data_out <= memory[addr]; // R
        }
    }
}

// Define the PIPELINED_CPU module
module PIPELINED_CPU {
    input clk, reset; 
    output [15:0] pc;

    // FETCH stage
    stage FETCH {
        input clk;
        output [7:0] instr;     // Instruction output

        instr <= memory[pc];    // Fetch 
    }

    // DECODE stage
    stage DECODE {
        input [7:0] instr;       // Instruction input
        output [3:0] opcode;     // Opcode output
        output [11:0] operand;   // Operand output

        opcode <= instr[15:12];  // Extract opcode
        operand <= instr[11:0];   // Extract operand
    }

    // EXECUTE stage
    stage EXECUTE {
        input [3:0] opcode;       // Opcode input
        input [11:0] operand;     // Operand input
        output reg [11:0] result; // Result output

        always {
            case (opcode) {
                4'b0000: result = operand + 1;   // Increment
                4'b0001: result = operand - 1;   // Decrement
                // Additional opcode operations TPD
            }
        }
    }

    // Define the pipeline connecting the stages
    pipeline {
        FETCH stage1;
        DECODE stage2;
        EXECUTE stage3;
    }
}

// Additional utility functions or modules TBD

// adder module
module ADDER {
    input [7:0] a, b;
    output [8:0] sum;

    always {
        sum <= a + b;
    }
}

//  multiplexer module
module MUX {
    input [7:0] a, b;
    input sel;
    output [7:0] out;

    always {
        if (sel) {
            out <= b; 
        } else {
            out <= a;
        }
    }
}

// flip-flop module
module D_FF {
    input clk, reset;           
    input d;                   
    output reg q;              

    always @(posedge clk or posedge reset) {
        if (reset) begin
            q <= 0;             
        end else begin
            q <= d;             
        end
    }
}

